/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package UI;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 * A simple interface that lets the computer scientist specify
 * the parameters she wants to use. Note, these are separate from
 * the user preferences that a student would subsequently specify.
 *
 * @author Liz
 */
public class AlgorithmChooser extends JFrame
{
    // variables to hold user choices for params
    private m450.AlgorithmType algorithmType;
    private m450.SelectionType selectionType;
    private int numOfGenerations;
    private int numOfIndividuals;
    private m450.VisType visType;
    private int numOfRuns;
    private String filenameForSave;
    private boolean selectionsMade = false;


    // attributes for JFrame
    private JPanel panel;

    private ButtonGroup algGroup;
    private JRadioButton ga;
    private JRadioButton hc;

    private ButtonGroup selGroup;
    private JRadioButton rs;
    private JRadioButton ts;

    private JLabel generationsLabel;
    private JTextField generations;

    private JLabel individualsLabel;
    private JTextField individuals;

    //private JLabel visualiseLabel;
    //private ButtonGroup visGroup;
    //private JRadioButton none;
    //private JRadioButton last;
    //private JRadioButton every;

    private JLabel runsLabel;
    private JTextField runs;

    private JLabel filenameLabel;
    private JTextField filename;

    private JButton okayButton;

    // constructor
    public AlgorithmChooser()
    {
        super("Choose parameters for the Algorithm");
        setSize(600, 400);
        panel = new JPanel();
        panel.setLayout(new GridLayout(7,2));

        // choose type of algorithm in first row
        ga = new JRadioButton("Genetic Algorithm", true);
        hc = new JRadioButton("Hill Climbing Algorithm");
        algGroup = new ButtonGroup();
        algGroup.add(ga);
        algGroup.add(hc);
        panel.add(ga);
        panel.add(hc);
        ga.setSelected(true);

        // choose type of selection in second row
        rs = new JRadioButton("Roulette Selection", true);
        ts = new JRadioButton("Tournament Selection");
        selGroup = new ButtonGroup();
        selGroup.add(rs);
        selGroup.add(ts);
        panel.add(rs);
        panel.add(ts);
        rs.setSelected(true);

        // choose number of generation in third row
        generationsLabel = new JLabel("How many generations?");
        generations = new JTextField("50");
        panel.add(generationsLabel);
        panel.add(generations);

        // choose number of individuals in fourth row
        individualsLabel = new JLabel("How many individuals / steps?");
        individuals = new JTextField("50");
        panel.add(individualsLabel);
        panel.add(individuals);

/*
        // choose visualisation options in 5th & 6th rows
        visualiseLabel = new JLabel("Which generations do you want visualised?");
        none = new JRadioButton("None", true);
        last = new JRadioButton("Last only");
        every = new JRadioButton("All");
        visGroup = new ButtonGroup();
        visGroup.add(none);
        visGroup.add(last);
        visGroup.add(every);
        panel.add(visualiseLabel);
        panel.add(none);
        panel.add(last);
        panel.add(every);
        none.setSelected(true);
 *
 */

        // choose how many runs are required in 7th row
        runsLabel = new JLabel("How many runs?");
        runs = new JTextField("8");
        panel.add(runsLabel);
        panel.add(runs);

        // choose filename for saving data
        filenameLabel = new JLabel("Choose filename to save data");
        filename = new JTextField("");
        panel.add(filenameLabel);
        panel.add(filename);


        // okay button on 9th row
        okayButton = new JButton("GO");
        panel.add(okayButton);

        okayButton.addActionListener(new ButtonListener() );

        add(panel);
        setVisible(true);

        // wait for input
        while (!selectionsMade)
        {
            try
            {
                // wait until okay button is pressed
                Thread.sleep(100);
            }
            catch (InterruptedException ex)
            {
                // this was auto-generated by netbeans
                Logger.getLogger(AlgorithmChooser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    } // end constructor



    // getter methods

    /**
     * @return the algorithmType
     */
    public m450.AlgorithmType getAlgorithmType() {
        return algorithmType;
    }

     /**
     * @return the selectionType
     */
    public m450.SelectionType getSelectionType() {
        return selectionType;
    }

    /**
     * @return the numOfGenerations
     */
    public int getNumOfGenerations() {
        return numOfGenerations;
    }

    /**
     * @return the numOfIndividuals
     */
    public int getNumOfIndividuals() {
        return numOfIndividuals;
    }

    /**
     * @return the numOfRuns
     */
    public int getNumOfRuns() {
        return numOfRuns;
    }

    /**
     * @return the filenameForSave
     */
    public String getFilenameForSave() {
        return filenameForSave;
    }

    

    // inner class
    private class ButtonListener implements ActionListener
    {


        public void actionPerformed(ActionEvent e)
        {
            // record user's preference for algorithm type
            if (hc.isSelected())
            {
                algorithmType = m450.AlgorithmType.HILL_CLIMBING;
            }
            else
            {
                algorithmType = m450.AlgorithmType.GENETIC;
            }

               // record user's preference for selection type
            if (rs.isSelected())
            {
                selectionType = m450.SelectionType.ROULETTE;
            }
            else
            {
                selectionType = m450.SelectionType.TOURNAMENT;
            }

            
            // record user's preference for generations
            numOfGenerations = Integer.parseInt(generations.getText() );

            // record user's preference for individuals
            numOfIndividuals = Integer.parseInt(individuals.getText() );
            
            // do viz stuff later.
            
            // record user's preference for visualisation
            /**

            if (none.isSelected() )
            {
                shouldVisualise = false;
                numToVisualise = 0;
            }
            else if ()
             */

            //shouldVisualise = false;
            //numToVisualise = 0;


            // record user's preference for number of runs
            numOfRuns = Integer.parseInt(runs.getText() );

            // record user's filename for saving
            filenameForSave = filename.getText() + ".csv";
            if (filenameForSave.equals("") )
            {
                filenameForSave = algorithmType +
                        "g" + numOfGenerations
                        + "n" + numOfIndividuals
                        + ".csv";
            }

            setVisible(false); // we don't need to see it any more
            selectionsMade = true; // jump out of the waiting loop

            

        }
    }

}

